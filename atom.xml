<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小红帽的个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-03-08T06:34:16.057Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>小红帽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python定时开关机脚本</title>
    <link href="http://example.com/2023/03/08/python%20%E8%84%9A%E6%9C%AC/python%E5%AE%9A%E6%97%B6%E5%BC%80%E5%85%B3%E6%9C%BA%E8%84%9A%E6%9C%AC/"/>
    <id>http://example.com/2023/03/08/python%20%E8%84%9A%E6%9C%AC/python%E5%AE%9A%E6%97%B6%E5%BC%80%E5%85%B3%E6%9C%BA%E8%84%9A%E6%9C%AC/</id>
    <published>2023-03-08T06:34:23.327Z</published>
    <updated>2023-03-08T06:34:16.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python定时开关机脚本win10"><a href="#python定时开关机脚本win10" class="headerlink" title="python定时开关机脚本win10"></a>python定时开关机脚本win10</h1><p>描述：每天早上8.00执行开机 ，15.32关机。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">today = datetime.datetime.now().weekday()</span><br><span class="line"><span class="keyword">if</span> today == <span class="number">6</span>:  <span class="comment"># 如果是星期天则跳过</span></span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">shutdown_time = datetime.datetime.now().replace(hour=<span class="number">5</span>, minute=<span class="number">32</span>, second=<span class="number">0</span>, microsecond=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> datetime.datetime.now() &gt; shutdown_time:</span><br><span class="line">    shutdown_time += datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">turnon_time = datetime.datetime.now().replace(hour=<span class="number">8</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>, microsecond=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> datetime.datetime.now() &gt; turnon_time:</span><br><span class="line">    turnon_time += datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    now = datetime.datetime.now()</span><br><span class="line">    <span class="keyword">if</span> today != now.weekday():  <span class="comment"># 每过一天重新检查是否为星期天</span></span><br><span class="line">        <span class="keyword">if</span> now.weekday() == <span class="number">6</span>:</span><br><span class="line">            exit()</span><br><span class="line">        today = now.weekday()</span><br><span class="line"></span><br><span class="line">        shutdown_time = datetime.datetime.now().replace(hour=<span class="number">5</span>, minute=<span class="number">32</span>, second=<span class="number">0</span>, microsecond=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> now &gt; shutdown_time:</span><br><span class="line">            shutdown_time += datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        turnon_time = datetime.datetime.now().replace(hour=<span class="number">8</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>, microsecond=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> now &gt; turnon_time:</span><br><span class="line">            turnon_time += datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> now &gt;= turnon_time <span class="keyword">and</span> now &lt;= shutdown_time:</span><br><span class="line">        os.system(<span class="string">&#x27;shutdown /a&#x27;</span>)  <span class="comment"># 取消之前的关机计划</span></span><br><span class="line">        time_diff = (shutdown_time - now).total_seconds()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;将在 %s 关机&#x27;</span> % shutdown_time)</span><br><span class="line">        os.system(<span class="string">&#x27;shutdown /s /t %d&#x27;</span> % time_diff)</span><br><span class="line">    <span class="keyword">elif</span> now &lt; turnon_time:</span><br><span class="line">        os.system(<span class="string">&#x27;shutdown /a&#x27;</span>)  <span class="comment"># 取消之前的关机计划</span></span><br><span class="line">        time_diff = (turnon_time - now).total_seconds()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;将在 %s 开机&#x27;</span> % turnon_time)</span><br><span class="line">        os.system(<span class="string">&#x27;shutdown /s /f /t %d&#x27;</span> % time_diff)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(<span class="string">&#x27;shutdown /a&#x27;</span>)  <span class="comment"># 取消之前的关机计划</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要在 Windows 10 上定时执行 Python 脚本，可以使用 Windows 任务计划程序。可以按照以下步骤操作：</p><p>1.打开 Windows 任务计划程序，选择“创建任务”来创建一个新的任务。<br>2.在“常规”选项卡中为该任务命名，并选择“以最高权限运行此任务”选项。<br>3.在“触发器”选项卡中添加一个新的触发器，设置触发器的开始时间、日期、重复间隔等信息。<br>4.在“操作”选项卡中添加一个新的操作，输入 Python 解释器的路径和要执行的脚本的路径。<br>5.在“条件”选项卡中选择一些其他的条件来控制任务的执行。<br>6.点击“确定”来保存该任务，并且在规定的时间自动执行 Python 脚本。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python定时开关机脚本win10&quot;&gt;&lt;a href=&quot;#python定时开关机脚本win10&quot; class=&quot;headerlink&quot; title=&quot;python定时开关机脚本win10&quot;&gt;&lt;/a&gt;python定时开关机脚本win10&lt;/h1&gt;&lt;p&gt;描述：每天早</summary>
      
    
    
    
    <category term="python 脚本" scheme="http://example.com/categories/python-%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="python 脚本" scheme="http://example.com/tags/python-%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>分支结构 . 循环结构</title>
    <link href="http://example.com/2023/03/07/%E5%AD%A6%E4%B9%A0/python%E5%AD%A6%E4%B9%A0/Day1/"/>
    <id>http://example.com/2023/03/07/%E5%AD%A6%E4%B9%A0/python%E5%AD%A6%E4%B9%A0/Day1/</id>
    <published>2023-03-07T08:12:22.000Z</published>
    <updated>2023-03-07T08:59:47.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>  在需要判断或选择的时候使用。</p><h3 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h3><p>   python中分支结构可以使用 if. elif . 和else 关键字。</p><p> 例子   :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">username = inpit(<span class="string">&#x27;请输入用户名&#x27;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&#x27;去输入密码&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password == <span class="string">&#x27;admin123&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登陆成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登陆失败&quot;</span>)</span><br></pre></td></tr></table></figure><p>   多个分支条件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        3x - 5  (x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =  x + 2   (-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">        5x + 3  (x &lt; -1)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;x = &#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> x &gt;= -<span class="number">1</span>:</span><br><span class="line">    y = x + <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;f(%.2f) = %.2f&#x27;</span> % (x, y))    </span><br></pre></td></tr></table></figure><br/><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>  重复执行代码或指令的时候 ，python 中有两种循环结构 ，for-in 和 while 循环。</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre><code> for-in循环，明确知道循环执行的次数或对一个容器进行迭代时可使用。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100求和</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)    <span class="comment">#5050</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">用for循环实现1~100的偶数求和</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">sum</span> += x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>) <span class="comment">#2550</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h1&gt;&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>面试题</title>
    <link href="http://example.com/2023/03/07/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://example.com/2023/03/07/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2023-03-07T05:50:15.081Z</published>
    <updated>2023-03-07T06:47:55.971Z</updated>
    
    <content type="html"><![CDATA[<p>什么是死锁(deadlock)？</p><p>死锁就是资源无法释放，两个线程都持有一个锁，且互相请求对方的锁，两个线程互相等待对方释放锁，就进入了无限等待状态。</p><p>死锁有四个必要条件：</p><p>资源互斥（锁在同一时刻只能被一个线程使用）<br>不可剥夺（其他线程无法抢夺已经被占有的锁，只能等占有者自行释放锁）<br>请求与保持（例如 A 线程的行为）<br>循环等待（例如 A、B 线程互相等待）</p><p>如何避免死锁？破坏四个必要条件之一，即可：</p><p>资源不互斥<br>可剥夺<br>同时请求，即要么同时持有所有需要的资源，要么都不持有<br>为资源编号，线程只能从小到大依次请求资源，不能请求一个更小编号的资源</p><br/><p> Redis的缓存击穿及解决方案</p><p>缓存击穿是指某一个热点数据缓存中没有但数据库中有数据（一般是缓存时间到期）。这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><p>面试官追问：缓存击穿你会怎么解决？<br>设置热点数据永远不过期。<br>接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些服务不可用时候，进行熔断，失败快速返回机制。<br>设置互斥锁。在并发的多个请求中，只有第一个请求线程能拿到锁并执行数据库查询操作，其他的线程拿不到锁就阻塞等着，等到第一个线程将数据写入缓存后，直接走缓存。（可以使用 Redis 分布式锁）</p><br/><p>spring的常用注解有哪些？</p><p>@Value：属性赋值</p><p>@Component:与业务层、dao层、控制层不相关的类需要在spring容器中创建使用</p><p>@Repository:dao层对象的创建</p><p>@Service:业务层层对象的创建</p><p>@Controller:控制层对象的创建</p><p>@Autowired:引用类型赋值,支持byName。默认是byType</p><br/><p>SpringMVC工作原理<br>请描述Spring MVC的工作流程？描述一下 DispatcherServlet 的工作流程</p><br/><p>从浏览器端发起请求会到dispatcheserverlet,前端控制器，前端控制器请求到处理器映射器，返回结果转发到处理器映射器，告诉他去处理器适配器，处理器适配器就回去执行处理器返回modelandview给处理器映射器，返回给前端控制器，给到视图解析器，返回视图再给到视图</p><br/><p>Sql语句优化有哪些？数据库的优化怎样优化？</p><br/><p>可以从几个方面考虑：</p><p>优化表结构</p><p>尽量使用数字型字段。若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。<br>尽可能的使用 varchar 代替 char。可变长字段存储空间小，可以节省存储空间。<br>当索引列大量重复数据时，可以把索引删除掉。比如有一列是性别，只有男、女，这样的索引是无效的。<br>优化查询</p><p>应尽量避免在 where 子句中使用 !&#x3D; 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。<br>应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描。建议使用 union 替换 or<br>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描<br>in 和 not in 也要慎用，否则会导致全表扫描<br>优化嵌套查询时可以将子查询尽量替换为多表连接查询（JOIN）<br>任何查询也不要出现select *！<br>索引优化</p><p>尽量使用复合索引，而少使用单列索引<br>最左前缀法则：如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列<br>对作为查询条件和 order by的字段建立索引<br>对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引<br>其他优化</p><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案：</p><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值表的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。<br>手动开启事务后在进行数据插入<br>数据有序插入（按主键）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是死锁(deadlock)？&lt;/p&gt;
&lt;p&gt;死锁就是资源无法释放，两个线程都持有一个锁，且互相请求对方的锁，两个线程互相等待对方释放锁，就进入了无限等待状态。&lt;/p&gt;
&lt;p&gt;死锁有四个必要条件：&lt;/p&gt;
&lt;p&gt;资源互斥（锁在同一时刻只能被一个线程使用）&lt;br&gt;不可剥夺（</summary>
      
    
    
    
    <category term="面试" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>实用代码</title>
    <link href="http://example.com/2023/03/07/java/%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    <id>http://example.com/2023/03/07/java/%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/</id>
    <published>2023-03-07T01:00:35.246Z</published>
    <updated>2023-03-07T06:47:53.150Z</updated>
    
    <content type="html"><![CDATA[<p>1.取出list的某一个值 </p><p>String code &#x3D; list.get(6).getMaterialCode();</p><p>2.contains方法<br>java.lang.String.contains()</p><p>方法返回true，当且仅当此字符串包含指定的char值序列</p><p>返回值为true和false</p><p>public static void main(String[] args) {</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;abc&quot;;</span><br><span class="line"></span><br><span class="line">boolean status = str.contains(&quot;a&quot;);</span><br><span class="line"></span><br><span class="line">if(status)&#123;</span><br><span class="line">    System.out.println(&quot;包含&quot;);</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    System.out.println(&quot;不包含&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>git：<br> git clone 仓库链接<br> git add ,<br> git commit -m “提交信息”<br> git push<br> git pull</p></li><li><p>vue：<br> npm run dev  &#x2F;&#x2F;启动一个vue项目</p></li><li><p>redis：<br> redis-server [–port 6379]   &#x2F;&#x2F;启动redis<br> .&#x2F;redis-cli [-h 127.0.0.1 -p 6379  &#x2F;&#x2F;链接redis</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.取出list的某一个值 &lt;/p&gt;
&lt;p&gt;String code &amp;#x3D; list.get(6).getMaterialCode();&lt;/p&gt;
&lt;p&gt;2.contains方法&lt;br&gt;java.lang.String.contains()&lt;/p&gt;
&lt;p&gt;方法返回tru</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="实用代码" scheme="http://example.com/tags/%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
</feed>
